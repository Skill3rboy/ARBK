
Praktikum3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078f  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ad  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  88:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
~ -> NOT

*/

void init(){
	DDRD= 0xff;		// Ports D als ausgang
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x00;
  94:	1b b8       	out	0x0b, r1	; 11
	
	TCCR0A = (1 << WGM01);						//  CTC Modus (Clear Timer on Compare Match) 
  96:	92 e0       	ldi	r25, 0x02	; 2
  98:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);		// Prescale 64
  9a:	85 b5       	in	r24, 0x25	; 37
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;								// if (OCR0A == Timer) -> Interupt
  a0:	89 ef       	ldi	r24, 0xF9	; 249
  a2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1 << OCIE0A);						// Interrupt timer anschalten
  a4:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();
  a8:	78 94       	sei
  aa:	08 95       	ret

000000ac <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
	Clk++;										//Timer-Counter
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  ca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	a1 1d       	adc	r26, r1
  d2:	b1 1d       	adc	r27, r1
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  dc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  e0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
  e4:	bf 91       	pop	r27
  e6:	af 91       	pop	r26
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <waitFor>:

void waitFor(uint32_t ms)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	8b 01       	movw	r16, r22
  fc:	9c 01       	movw	r18, r24
	uint32_t ziel = Clk + ms; //Zielpunkt auf den wir warten
  fe:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 102:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 106:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_edata+0x2>
 10a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_edata+0x3>
 10e:	40 0f       	add	r20, r16
 110:	51 1f       	adc	r21, r17
 112:	62 1f       	adc	r22, r18
 114:	73 1f       	adc	r23, r19
	
	if(ziel < Clk)	// Wenn ein overflow bei Ziel passiert ist
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 122:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 126:	48 17       	cp	r20, r24
 128:	59 07       	cpc	r21, r25
 12a:	6a 07       	cpc	r22, r26
 12c:	7b 07       	cpc	r23, r27
 12e:	a8 f4       	brcc	.+42     	; 0x15a <waitFor+0x64>
	{
		Clk=0;		//CLk reset
 130:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 134:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 138:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 13c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
		while(Clk<ms) 
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 144:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 148:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 14c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 150:	80 17       	cp	r24, r16
 152:	91 07       	cpc	r25, r17
 154:	a2 07       	cpc	r26, r18
 156:	b3 07       	cpc	r27, r19
 158:	98 f3       	brcs	.-26     	; 0x140 <waitFor+0x4a>
		{}
	}
	while(Clk < ziel) // Warte solange bis die CLK größer der Zielzeit ist
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 162:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 166:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 16a:	84 17       	cp	r24, r20
 16c:	95 07       	cpc	r25, r21
 16e:	a6 07       	cpc	r26, r22
 170:	b7 07       	cpc	r27, r23
 172:	98 f3       	brcs	.-26     	; 0x15a <waitFor+0x64>
	{}
}
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <waitUntil>:

void waitUntil(uint32_t ms)
{
 17a:	ab 01       	movw	r20, r22
 17c:	bc 01       	movw	r22, r24
	while (Clk <=ms) // Wait until Clk ist größer/gleich ms
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 186:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 18a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 18e:	48 17       	cp	r20, r24
 190:	59 07       	cpc	r21, r25
 192:	6a 07       	cpc	r22, r26
 194:	7b 07       	cpc	r23, r27
 196:	98 f7       	brcc	.-26     	; 0x17e <waitUntil+0x4>
	{
	}
	
}
 198:	08 95       	ret

0000019a <main>:
int main(void)
{
	init();
 19a:	0e 94 48 00 	call	0x90	; 0x90 <init>
	
	waitUntil(5000); // Warte 5sekunden
 19e:	68 e8       	ldi	r22, 0x88	; 136
 1a0:	73 e1       	ldi	r23, 0x13	; 19
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 bd 00 	call	0x17a	; 0x17a <waitUntil>
	PORTD |= (1<<LED); // danach led an
 1aa:	58 9a       	sbi	0x0b, 0	; 11
    /* Replace with your application code */
    while (1) 
    {
		waitFor(2000); // Warte 2 sekunden
		PORTD ^= (1<<LED); // blinke blinke
 1ac:	c1 e0       	ldi	r28, 0x01	; 1
	waitUntil(5000); // Warte 5sekunden
	PORTD |= (1<<LED); // danach led an
    /* Replace with your application code */
    while (1) 
    {
		waitFor(2000); // Warte 2 sekunden
 1ae:	60 ed       	ldi	r22, 0xD0	; 208
 1b0:	77 e0       	ldi	r23, 0x07	; 7
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 7b 00 	call	0xf6	; 0xf6 <waitFor>
		PORTD ^= (1<<LED); // blinke blinke
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8c 27       	eor	r24, r28
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	f6 cf       	rjmp	.-20     	; 0x1ae <main+0x14>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
