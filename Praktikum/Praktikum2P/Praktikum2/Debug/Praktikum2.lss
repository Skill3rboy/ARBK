
Praktikum2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001ae  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077f  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ae  00000000  00000000  00000a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f4  00000000  00000000  00001115  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b0  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 88 00 	call	0x110	; 0x110 <main>
  9e:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
|= -> OR
~ -> NOT
*/
void init()
{
	DDRC= 0x00; // Port C als ein Eingang schalten
  a6:	17 b8       	out	0x07, r1	; 7
	PORTC=0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	88 b9       	out	0x08, r24	; 8
	
	DDRD=0xFF; // Port D als Ausgang schalten
  ac:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x00;
  ae:	1b b8       	out	0x0b, r1	; 11
  b0:	08 95       	ret

000000b2 <button>:
}


void button() 
{
	if(!(PINC &(1<<SW1))) //Prüft ob gedrückt
  b2:	30 99       	sbic	0x06, 0	; 6
  b4:	15 c0       	rjmp	.+42     	; 0xe0 <button+0x2e>
	{
		if(PIND & (1 << LED0))						// Wenn die LED0 an ist
  b6:	48 9b       	sbis	0x09, 0	; 9
  b8:	07 c0       	rjmp	.+14     	; 0xc8 <button+0x16>
		{
			blink ^= 1;							//blinken durchschalten mit XOR
  ba:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	89 27       	eor	r24, r25
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  c6:	0c c0       	rjmp	.+24     	; 0xe0 <button+0x2e>
		}
		else if(PIND & (1 << LED9))					// LED swap
  c8:	49 9b       	sbis	0x09, 1	; 9
  ca:	0a c0       	rjmp	.+20     	; 0xe0 <button+0x2e>
		{
			off = LED9;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <off+0x1>
  d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <off>
			on = LED0;
  d8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
  dc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		}
	}
	if(!(PINC & (1 << SW2))) // Prüft ob gedrückt
  e0:	31 99       	sbic	0x06, 1	; 6
  e2:	15 c0       	rjmp	.+42     	; 0x10e <button+0x5c>
	{
		if(PIND & (1 << LED9))						// Wenn die LED9 an ist
  e4:	49 9b       	sbis	0x09, 1	; 9
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <button+0x44>
		{
			blink ^= (1 << 0);						//blinken durchschalten mit XOR
  e8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	89 27       	eor	r24, r25
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  f4:	08 95       	ret
		}
		else if((PIND & (1 << LED0)))				// LED swap
  f6:	48 9b       	sbis	0x09, 0	; 9
  f8:	0a c0       	rjmp	.+20     	; 0x10e <button+0x5c>
		{
			off = LED0;
  fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <off+0x1>
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <off>
			on = LED9;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 10a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 10e:	08 95       	ret

00000110 <main>:
	}
}

int main(void)
{
	init();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
		if(blink)
		{
			PORTD &= ~(1 << off); // off soll off bleiben
			PORTD ^= (1 << on);	// XOR- für blink instanz
		}else{
			PORTD &= ~(1 << off); // led off soll off bleiben
 114:	0f 2e       	mov	r0, r31
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	ef 2e       	mov	r14, r31
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	ff 2e       	mov	r15, r31
 11e:	f0 2d       	mov	r31, r0
 120:	c1 e0       	ldi	r28, 0x01	; 1
 122:	d0 e0       	ldi	r29, 0x00	; 0
			PORTD |= (1 << on); // Or- für Konstantes an 
 124:	04 e0       	ldi	r16, 0x04	; 4
 126:	11 e0       	ldi	r17, 0x01	; 1
{
	init();
    /* Replace with your application code */
    while (1) 
    {
		button();
 128:	0e 94 59 00 	call	0xb2	; 0xb2 <button>
		if(blink)
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 130:	88 23       	and	r24, r24
 132:	c9 f0       	breq	.+50     	; 0x166 <main+0x56>
		{
			PORTD &= ~(1 << off); // off soll off bleiben
 134:	9b b1       	in	r25, 0x0b	; 11
 136:	9e 01       	movw	r18, r28
 138:	f7 01       	movw	r30, r14
 13a:	00 80       	ld	r0, Z
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0x32>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <main+0x2e>
 146:	82 2f       	mov	r24, r18
 148:	80 95       	com	r24
 14a:	89 23       	and	r24, r25
 14c:	8b b9       	out	0x0b, r24	; 11
			PORTD ^= (1 << on);	// XOR- für blink instanz
 14e:	2b b1       	in	r18, 0x0b	; 11
 150:	ce 01       	movw	r24, r28
 152:	f8 01       	movw	r30, r16
 154:	00 80       	ld	r0, Z
 156:	02 c0       	rjmp	.+4      	; 0x15c <main+0x4c>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <main+0x48>
 160:	82 27       	eor	r24, r18
 162:	8b b9       	out	0x0b, r24	; 11
 164:	18 c0       	rjmp	.+48     	; 0x196 <main+0x86>
		}else{
			PORTD &= ~(1 << off); // led off soll off bleiben
 166:	9b b1       	in	r25, 0x0b	; 11
 168:	9e 01       	movw	r18, r28
 16a:	f7 01       	movw	r30, r14
 16c:	00 80       	ld	r0, Z
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0x64>
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <main+0x60>
 178:	82 2f       	mov	r24, r18
 17a:	80 95       	com	r24
 17c:	89 23       	and	r24, r25
 17e:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << on); // Or- für Konstantes an 
 180:	2b b1       	in	r18, 0x0b	; 11
 182:	ce 01       	movw	r24, r28
 184:	f8 01       	movw	r30, r16
 186:	00 80       	ld	r0, Z
 188:	02 c0       	rjmp	.+4      	; 0x18e <main+0x7e>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <main+0x7a>
 192:	82 2b       	or	r24, r18
 194:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	ff ef       	ldi	r31, 0xFF	; 255
 198:	23 ec       	ldi	r18, 0xC3	; 195
 19a:	89 e0       	ldi	r24, 0x09	; 9
 19c:	f1 50       	subi	r31, 0x01	; 1
 19e:	20 40       	sbci	r18, 0x00	; 0
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x8c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x96>
 1a6:	00 00       	nop
 1a8:	bf cf       	rjmp	.-130    	; 0x128 <main+0x18>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
